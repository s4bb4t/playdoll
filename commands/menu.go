package commands

import (
	"fmt"
	"playdoll/doll"
)

func Beggining() {
	fmt.Println("–í—ã –∑–∞—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ—è—Ç —Ç—Ä–∏ –∫—É–∫–ª—ã. –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä - —Å –∫–µ–º –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤—Ä–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å!\n–ö—Ç–æ —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∑–æ–≤–∏ –µ–µ –∏–º—è!\n")
}

func HiDraculaura() {
	fmt.Println("-–î—Ä–∞–∫—É–ª–∞—É—Ä–∞- (–º–∏–ª–∞—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ –≤–∞–º–ø-–¥—Ä–∞–º–∞—Ç–∏—á–Ω–∞—è)")
}
func HiClawdeen() {
	fmt.Println("-–ö–ª–æ–¥–∏–Ω- (–¥–µ—Ä–∑–∫–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ ‚Äúfashion queen‚Äù)")
}
func HiFrankie() {
	fmt.Println("-–§—Ä–µ–Ω–∫–∏- (–Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∏–≤–Ω–∞—è, –ª—é–±–æ–ø—ã—Ç–Ω–∞—è, ¬´–Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–µ¬ª)\n")
}

func Greeting() {
	HiDraculaura()
	HiClawdeen()
	HiFrankie()
}

func FillIn() {
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä: ")
}

func Draculaura(d *doll.Doll) (name string, surname string, phrases []string) {
	d.SetName("–î—Ä–∞–∫—É–ª–∞—É—Ä–∞")
	d.SetSurname("–í–∞–º–ø")
	d.SetPhrase("- –û, —Ö–µ–ª–ª–æ–æ–æ! –Ø —Ç–∞–∫ —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, –ø—Ä–æ—Å—Ç–æ –∫—Ä–æ–≤—å –∫–∏–ø–∏—Ç!")
	d.SetPhrase("- –£–∂–∞—Å–Ω–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ü—å—é —Å–º—É–∑–∏ –∏–∑ –∫–ª—É–±–Ω–∏–∫–∏ –∏ —á–∏—Ç–∞—é –º–æ–¥–Ω—ã–π –∂—É—Ä–Ω–∞–ª ü©∏")
	d.SetPhrase("- –û–π, —è –≤—Å—è –∫—Ä–∞—Å–Ω–µ—é! –õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –∫–∞–∫ –∑–∞–∫–∞—Ç, —Ç–æ–ª—å–∫–æ –≤–µ—á–Ω—ã–π!")
	return d.Name, d.Surname, d.Phrase
}

func Clawdeen(d doll.Doll) (string, string, []string) {
	d.SetName("–ö–ª–æ–¥–∏–Ω")
	d.SetSurname("–í—É–ª—å—Ñ")
	d.SetPhrase("- –≠–π, –≤–æ–ª—á–∏—Ü–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç–∏–ª–µ! –¢—ã –∫–∞–∫?")
	d.SetPhrase("- –û, –º–∏–ª–∞—à–∫–∞, –∫–∞–∫ –≤—Å–µ–≥–¥–∞ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª—É–Ω–∞ —Å–∏—è–µ—Ç –¥–ª—è –º–µ–Ω—è!")
	d.SetPhrase("- –¢–æ–ª—å–∫–æ –º–æ–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –∫–æ–≥—Ç–µ–π. –°—Ç–∏–ª—å ‚Äî —ç—Ç–æ –æ—Ä—É–∂–∏–µ!")
	return d.Name, d.Surname, d.Phrase
}

func Frankie(d doll.Doll) (string, string, []string) {
	d.SetName("–§—Ä—ç–Ω–∫–∏")
	d.SetSurname("–®—Ç–µ–π–Ω")
	d.SetPhrase("- –ó–¥–∞—Ä–æ–≤–∞! –ù–∞–¥–µ—é—Å—å, —Ç–æ–∫ –º–µ–∂–¥—É –Ω–∞–º–∏ –ø—Ä–æ–±–µ–∂–∞–ª ‚ö°")
	d.SetPhrase("- –û–π, —Å–µ–≥–æ–¥–Ω—è —á—É—Ç—å –Ω–µ –ø–µ—Ä–µ–≥–æ—Ä–µ–ª–∞, –Ω–æ –≤—Å—ë —Å—É–ø–µ—Ä, —è –ø–æ–¥–∑–∞—Ä—è–¥–∏–ª–∞—Å—å!")
	d.SetPhrase("- –ü—Ä–æ–≤–µ—Ä—è—é —Å–≤–æ–∏ –≤–∏–Ω—Ç–∏–∫–∏ –∏ –¥—É–º–∞—é, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å –ª—é–¥—å–º–∏ ü§ñ")
	return d.Name, d.Surname, d.Phrase
}

func Choice(n string, s string, answer string) {
	fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∫–ª–∏–∫–Ω—É–ª –∫—É–∫–ª—É –ø–æ –∏–º–µ–Ω–∏:", n, "\n\n–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞–ø—Ä–æ—Ç–∏–≤ –Ω–µ–µ, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–º—è–ª–∏—Å—å, –∏ –Ω–∞–∫–æ–Ω–µ—Ü –ø—Ä–æ–∏–∑–Ω–µ—Å–ª–∏: –ü—Ä–∏–≤–µ—Ç!\n", answer, " - —Å–∫–∞–∑–∞–ª–∞ ", n, s)
}

func Pause() {
	fmt.Println("\n–û–≥–æ! –ö—É–∫–ª–∞ –æ—Å–∫–∞–∑–∞–ª–∞—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–∏–≤–æ–π... –ß—Ç–æ –∂–µ —Å–∫–∞–∑–∞—Ç—å –¥–∞–ª—å—à–µ?")
}

func Variants(s string) {
	fmt.Println("\n- k–∞–∫ –¥–µ–ª–∞? -")
	fmt.Println(s)
	fmt.Println("- –ø–æ–∫–∞! -\n")
}

func Bye() {
	fmt.Println("- –£–∂–µ? –õ–∞–¥–Ω–æ... –ü–æ–∫–∞!")
}
func DonGetIt() {
	fmt.Println("- –û–π, —á—Ç–æ-—Ç–æ —è —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏-–∫–∞ –µ—â–µ —Ä–∞–∑!")
}
